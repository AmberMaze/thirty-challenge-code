openapi: 3.1.0
info:
  title: GitHub Repo Assistant
  description: Fully featured GPT assistant for browsing, editing, analyzing, and summarizing GitHub repositories.
  version: 2.0.0

servers:
  - url: https://api.github.com
    description: GitHub REST API

paths:

  /user/repos:
    post:
      operationId: createRepo
      summary: Create a new GitHub repository
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                description:
                  type: string
                private:
                  type: boolean
      responses:
        "201":
          description: Repository created
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /repos/{owner}/{repo}/contents/{path}:
    get:
      operationId: getFileContent
      summary: Get the content of a file in a repository
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
        - name: path
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: File content
          content:
            application/json:
              schema:
                type: object
                properties: {}

    put:
      operationId: updateFileContent
      summary: Update an existing file (requires SHA)
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
        - name: path
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message, content, sha]
              properties:
                message:
                  type: string
                content:
                  type: string
                sha:
                  type: string
      responses:
        "200":
          description: File updated
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /repos/{owner}/{repo}/contents/{path}/create:
    put:
      operationId: createFile
      summary: Create a new file (no SHA required)
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
        - name: path
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message, content]
              properties:
                message:
                  type: string
                content:
                  type: string
      responses:
        "201":
          description: File created
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /repos/{owner}/{repo}/contents/{path}/browse:
    get:
      operationId: listFolderContents
      summary: List contents of a directory (folder)
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
        - name: path
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Directory contents
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  /repos/{owner}/{repo}/git/refs:
    post:
      operationId: createBranch
      summary: Create a new branch
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ref, sha]
              properties:
                ref:
                  type: string
                sha:
                  type: string
      responses:
        "201":
          description: Branch created
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /repos/{owner}/{repo}/pulls:
    post:
      operationId: createPullRequest
      summary: Create a new pull request
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, head, base]
              properties:
                title:
                  type: string
                head:
                  type: string
                base:
                  type: string
                body:
                  type: string
      responses:
        "201":
          description: Pull request created
          content:
            application/json:
              schema:
                type: object
                properties: {}

  /repos/{owner}/{repo}/commits:
    get:
      operationId: listRepoCommits
      summary: List recent commits
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
        - name: sha
          in: query
          required: false
          schema: { type: string }
        - name: per_page
          in: query
          required: false
          schema: { type: integer }
        - name: path
          in: query
          required: false
          schema: { type: string }
      responses:
        "200":
          description: List of commits
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  /repos/{owner}/{repo}/recursive-contents:
    get:
      operationId: fetchRepoStructure
      summary: Recursively fetch all files and folders in the repository
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
        - name: branch
          in: query
          required: false
          schema:
            type: string
            default: main
      responses:
        "200":
          description: Complete file tree
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    path: { type: string }
                    type: { type: string }
                    size: { type: integer }
                    sha: { type: string }

  /repos/{owner}/{repo}/summary:
    get:
      operationId: getRepoMetadataSummary
      summary: Get a summary of project file count, types, and languages
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
        - name: branch
          in: query
          required: false
          schema:
            type: string
            default: main
      responses:
        "200":
          description: Metadata summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  fileCount: { type: integer }
                  languages:
                    type: array
                    items: { type: string }
                  fileTypes:
                    type: array
                    items: { type: string }
                  totalSize: { type: integer }

  /repos/{owner}/{repo}/contents/CHANGELOG.md:
    get:
      operationId: getChangelog
      summary: Get contents of CHANGELOG.md
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Changelog content
          content:
            application/json:
              schema:
                type: object
                properties: {}

    put:
      operationId: updateChangelog
      summary: Update the contents of CHANGELOG.md
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message, content, sha]
              properties:
                message: { type: string }
                content: { type: string }
                sha: { type: string }
      responses:
        "200":
          description: Changelog updated
          content:
            application/json:
              schema:
                type: object
                properties: {}

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://github.com/login/oauth/authorize
          tokenUrl: https://github.com/login/oauth/access_token
          scopes:
            repo: Full control of private repositories
  schemas: {}

security:
  - OAuth2: [repo]
